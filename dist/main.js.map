{"version":3,"sources":["../main.js"],"names":["require","BrowserWindow","app","SerialPort","Readline","parsers","path","url","regex","currentEnvironment","process","env","NODE_ENV","isOnline","possibleComNames","mainWindow","units","status","windowOptions","center","minWidth","minHeight","width","height","readLine","line","parsedLine","stableString","m","exec","index","lastIndex","undefined","console","log","closeWindow","closeMessage","close","setInterval","then","online","initSerialPort","comName","port","parser","list","err","ports","forEach","tempPort","includes","pipe","on","data","currentWeight","code","webContents","getURL","executeJavaScript","createWindow","addDevToolsExtension","openDevTools","loadURL","quit"],"mappings":"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","file":"main.js","sourcesContent":["const { BrowserWindow, app } = require( 'electron' );\r\nconst SerialPort             = require( 'serialport' );\r\nconst Readline = SerialPort.parsers.Readline;\r\nconst path                   = require( 'path' );\r\nconst url                    = require( 'url' );\r\nconst regex                  = /(ST|US),GS,\\s+([0-9.]+)(lb|kb)/g;\r\nconst currentEnvironment     = process.env.NODE_ENV;\r\nconst isOnline               = require( 'is-online' );\r\nconst possibleComNames       = [\r\n  \"/dev/cu.usbserial\",\r\n  'COM1',\r\n  'COM2',\r\n  'COM3',\r\n  'COM4',\r\n  'COM5',\r\n  'COM6',\r\n  'COM7',\r\n  'COM8',\r\n  'COM9',\r\n]; //dev/tty.usbserial = MAC ; COM3 = Windows\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the JavaScript object is garbage collected.\r\nlet mainWindow, units, status;\r\n\r\nlet windowOptions = {\r\n  center: true,\r\n  minWidth: 1000,\r\n  minHeight: 768,\r\n  width: 1366,\r\n  height: 768,\r\n};\r\n\r\nfunction readLine( line ){\r\n  let parsedLine = '0.000';\r\n  let stableString;\r\n  while((m = regex.exec( line )) !== null) {\r\n\t// This is necessary to avoid infinite loops with zero-width matches\r\n\tif(m.index === regex.lastIndex) {\r\n\t  regex.lastIndex++;\r\n\t}\r\n\tunits        = m[ 3 ];\r\n\tparsedLine   = m[ 2 ];\r\n\tstableString = m[ 1 ];\r\n  }\r\n  if(stableString !== undefined) {\r\n\tstatus = stableString;\r\n  }\r\n  console.log( \"Status \", status );\r\n  return parsedLine;\r\n}\r\n\r\nfunction closeWindow( closeMessage = 'you did something wrong.' ){\r\n  mainWindow.close();\r\n  console.log( 'Window closed because ' + closeMessage );\r\n}\r\n\r\n// Check that the PC has internet once the window is open every couple seconds\r\nsetInterval( () => isOnline().then( online => {\r\n\t  if(online !== true) {\r\n\t\tcloseWindow( 'you have lost internet.' );\r\n\t  }\r\n\t} ), 1000\r\n);\r\n\r\n\r\n/** Serial Port Stuff **/\r\nfunction initSerialPort(){\r\n  let comName = '';\r\n  let port;\r\n  const parser = new Readline();\r\n  \r\n  try {\r\n\tSerialPort.list( ( err, ports ) => {\r\n\t  ports.forEach( ( tempPort ) => {\r\n\t\tif(possibleComNames.includes( tempPort.comName )) {\r\n\t\t  comName = tempPort.comName;\r\n\t\t  port    = new SerialPort( comName );\r\n\t\t  port.pipe(parser);\r\n\t\t  \r\n\t\t  // Only inject code when they are on the correct web page\r\n\t\t  // Stream all data coming in from the serial port.\r\n\t\t  parser.on( 'data', function( data ){\r\n\t\t\tlet currentWeight = readLine( data );\r\n\t\t\tconsole.log( \"Current Weight: \", currentWeight );\r\n\t\t\t\r\n\t\t\tlet code = `if(document.getElementById(\"weight\") !== null){\r\n                    document.getElementById(\"weight\").value = \"${currentWeight}\";\r\n                    document.getElementById(\"status\").innerHTML = \"${status}\";\r\n                    document.getElementById(\"units\").innerHTML = \"${units}\";\r\n                    };`;\r\n\t\t\t\r\n\t\t\tif(mainWindow.webContents.getURL().includes( 'tools/weighStation' )) {\r\n\t\t\t  console.log( \"Execute\" );\r\n\t\t\t  mainWindow.webContents.executeJavaScript( code );\r\n\t\t\t}\r\n\t\t  } );\r\n\t\t}\r\n\t  } );\r\n\t} );\r\n  }\r\n  catch(err) {\r\n\tconsole.log( 'I caught a thing. '.err );\r\n  }\r\n}\r\n\r\n\r\n/** BrowserWindow setup and such **/\r\nfunction createWindow(){\r\n  \r\n  // Create the browser window.\r\n  mainWindow = new BrowserWindow( windowOptions );\r\n  \r\n  \r\n  // When in development environment, open the Redux DevTools Extension and the Chrome DevTools.\r\n  // Need to have the Chrome Extension at the location below.\r\n  // If on MAC and have Redux DevTools installed, then it should be at this location.\r\n  if(currentEnvironment === 'DEV') {\r\n\tBrowserWindow.addDevToolsExtension( \"../../Library/Application Support/Google/Chrome/Default/Extensions/lmhkpmbekcpmknklioeibfkpmmfibljd/2.15.1_0/\" );\r\n\t// Open the DevTools.\r\n\tmainWindow.webContents.openDevTools();\r\n\tmainWindow.loadURL( 'http://localhost:3000' );\r\n  }\r\n  else if(currentEnvironment === 'WINDEV') {\r\n\t// Open the DevTools.\r\n\tmainWindow.webContents.openDevTools();\r\n\tmainWindow.loadURL( 'http://localhost:3000' );\r\n  }\r\n  else {\r\n\t// and load the index.html of the app.\r\n\tmainWindow.loadURL( 'https://ws.fulfillment.com/' );\r\n  }\r\n  // Emitted when the window is closed.\r\n  mainWindow.on( 'closed', function(){\r\n\t// Dereference the window object, usually you would store windows\r\n\t// in an array if your app supports multi windows, this is the time\r\n\t// when you should delete the corresponding element.\r\n\tmainWindow = null;\r\n  } );\r\n  mainWindow.webContents.on( 'did-finish-load', function(){\r\n\tinitSerialPort();\r\n  } );\r\n}\r\n\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.on( 'ready', function(){\r\n  createWindow();\r\n} );\r\n\r\n// Quit when all windows are closed.\r\napp.on( 'window-all-closed', function(){\r\n  // On OS X it is common for applications and their menu bar\r\n  // to stay active until the user quits explicitly with Cmd + Q\r\n  app.quit();\r\n} );\r\n\r\napp.on( 'activate', function(){\r\n  // On OS X it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if(mainWindow === null) {\r\n\tcreateWindow();\r\n  }\r\n} );\r\n"]}