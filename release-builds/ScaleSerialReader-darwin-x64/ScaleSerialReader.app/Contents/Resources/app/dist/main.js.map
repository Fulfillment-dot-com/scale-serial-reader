{"version":3,"sources":["../main.js"],"names":["require","BrowserWindow","app","SerialPort","path","url","regex","currentEnvironment","process","env","NODE_ENV","mainWindow","units","status","port","windowOptions","center","width","height","initSerialPort","parser","parsers","readline","baudrate","readLine","line","parsedLine","stableString","m","exec","index","lastIndex","undefined","console","log","createWindow","addDevToolsExtension","webContents","openDevTools","loadURL","on","data","getURL","includes","currentWeight","code","executeJavaScript","quit"],"mappings":"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","file":"main.js","sourcesContent":["const {BrowserWindow, app} = require('electron');\nconst SerialPort = require('SerialPort');\nconst path = require('path');\nconst url = require('url');\nconst regex = /(ST|US),GS,\\s+([0-9.]+)(lb|kb)/g;\nconst currentEnvironment = process.env.NODE_ENV;\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow, units, status, port;\n\n\nlet windowOptions = {\n  center: true,\n  width: 2000,\n  height: 1800,\n};\n\n/** Serial Port Stuff **/\nfunction initSerialPort(path) {\n  port = new SerialPort(path, {\n    parser: SerialPort.parsers.readline('\\n'),\n    baudrate: 19200\n  });\n}\n\nfunction readLine(line) {\n  // console.log(line);\n  let parsedLine = '0.000';\n  let stableString;\n  while ((m = regex.exec(line)) !== null) {\n    // This is necessary to avoid infinite loops with zero-width matches\n    if (m.index === regex.lastIndex) {\n      regex.lastIndex++;\n    }\n    // The result can be accessed through the `m`-variable.\n    // m.forEach((match, groupIndex) => {\n    //   console.log(`Found match, group ${groupIndex}: ${match}`);\n    // });\n    units = m[3];\n    parsedLine = m[2];\n    stableString = m[1];\n  }\n  if (stableString !== undefined) {\n    status = stableString;\n  }\n  console.log(\"Status \", status);\n  return parsedLine;\n}\n\n\n/** BrowserWindow setup and such **/\nfunction createWindow() {\n\n  // Create the browser window.\n  mainWindow = new BrowserWindow({width: 2000, height: 1800});\n\n  // When in development environment, open the Redux DevTools Extension and the Chrome DevTools.\n  // Need to have the Chrome Extension at the location below.\n  // If on MAC and have Redux DevTools installed, then it should be at this location.\n  if (currentEnvironment == 'DEV') {\n    BrowserWindow.addDevToolsExtension(\"../../Library/Application Support/Google/Chrome/Default/Extensions/lmhkpmbekcpmknklioeibfkpmmfibljd/2.14.1_0/\");\n    // Open the DevTools.\n    mainWindow.webContents.openDevTools();\n  }\n\n  // and load the index.html of the app.\n  mainWindow.loadURL('http://localhost:3000/weighStation');\n\n  // Initialize the serial port\n  initSerialPort('/dev/tty.usbserial');\n\n  mainWindow.webContents.on('did-finish-load', function () {\n    // Only inject code when they are on the correct web page\n    // Stream all data coming in from the serial port.\n    port.on('data', function (data) {\n      console.log(mainWindow.webContents.getURL());\n      if (data && mainWindow.webContents.getURL().includes('weighStation')) {\n        let currentWeight = readLine(data);\n        console.log(\"Current Weight: \", currentWeight);\n        let code = `document.getElementById(\"weight\").innerHTML = \"${currentWeight}\";\n                    document.getElementById(\"status\").innerHTML = \"${status}\";\n                    document.getElementById(\"units\").innerHTML = \"${units}\"`;\n        mainWindow.webContents.executeJavaScript(code);\n      }\n    });\n  });\n\n  // Emitted when the window is closed.\n  mainWindow.on('closed', function () {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = null\n  })\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', function () {\n  createWindow();\n});\n\n// Quit when all windows are closed.\napp.on('window-all-closed', function () {\n  // On OS X it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  app.quit();\n});\n\napp.on('activate', function () {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n"]}